name: Build and Deploy applications

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'
      - '.infra/**'

env:
  EB_ARTIFACTS_BUCKET: '${{ secrets.PROJECT_NAME }}-build-artifacts'
  EB_APPLICATION_NAME: ${{ secrets.PROJECT_NAME }}
  EB_ENVIRONMENT_NAME: '${{ secrets.PROJECT_NAME }}-production'
  APP_BUNDLE_NAME: '${{ secrets.PROJECT_NAME }}-${{ github.sha }}.zip'
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  VITE_API_URL: ${{ secrets.VITE_API_URL}}
  VITE_AUTH0_DOMAIN: ${{ secrets.VITE_AUTH0_DOMAIN }}
  VITE_AUTH0_CLIENT_ID: ${{ secrets.VITE_AUTH0_CLIENT_ID}}
  VITE_AUTH0_CALLBACK_URL: ${{ secrets.VITE_AUTH0_CALLBACK_URL }}
  VITE_API_AUTH0_AUDIENCE: ${{ secrets.VITE_API_AUTH0_AUDIENCE}}

jobs:
  sonarqube:
    name: Sonarqube analysis
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  buildapi:
    name: Build backend application
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: apps/api

    steps:
      - uses: actions/checkout@v4
      - name: Check for changes in api folder
        id: buildapifilter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            api:
              - 'apps/api/**'
      
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Dependencies
        if: steps.buildapifilter.outputs.api == 'true'
        run: npm install

      - name: Build
        if: steps.buildapifilter.outputs.api == 'true'
        run: npm run build
      
      - name: Create zip deployment package
        if: steps.buildapifilter.outputs.api == 'true'
        run: zip -r ${{ env.APP_BUNDLE_NAME }} ./ -x "node_modules/*"

      - name: Upload package to S3 bucket
        if: steps.buildapifilter.outputs.api == 'true'
        run: aws s3 cp ${{ env.APP_BUNDLE_NAME }} s3://${{env.EB_ARTIFACTS_BUCKET}}

  deploy:
    name: Deploy artifacts
    runs-on: ubuntu-latest
    needs: buildapi

    steps:
      - uses: actions/checkout@v4
      - name: Check for changes in api folder
        id: deployapifilter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            api:
              - 'apps/api/**'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create EB application version
        if: steps.deployapifilter.outputs.api == 'true'
        run: |
          aws elasticbeanstalk create-application-version \
          --application-name ${{env.EB_APPLICATION_NAME}} \
          --version-label "${{ github.sha }}" \
          --source-bundle S3Bucket="${{ env.EB_ARTIFACTS_BUCKET }}",S3Key="${{ env.APP_BUNDLE_NAME }}"

      - name: Deploy new application version
        if: steps.deployapifilter.outputs.api == 'true'
        run: |
          aws elasticbeanstalk update-environment \
          --environment-name ${{ env.EB_ENVIRONMENT_NAME }} \
          --version-label "${{ github.sha }}"

  deployclient:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: apps/client

    steps:
      - uses: actions/checkout@v4
      - name: Check for changes in client folder
        id: deployclientfilter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            client:
              - 'apps/client/**'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build React App
        if: steps.deployclientfilter.outputs.client == 'true'
        run: npm install
        
      - name: Install Dependencies
        if: steps.deployclientfilter.outputs.client == 'true'
        run: npm run build

      - name: Deploy app build to S3 bucket
        if: steps.deployclientfilter.outputs.client == 'true'
        run: aws s3 sync ./dist/ s3://x22212973-inventory-app-production --delete
